import Dependencies._
import org.scalafmt.sbt.ScalafmtPlugin.autoImport.scalafmtOnCompile
import sbt.Keys.{semanticdbEnabled, semanticdbVersion, versionScheme}
import sbt.VirtualAxis.ScalaVersionAxis

lazy val supportedScalaVersions = List(scalaVersion213, scalaVersion212)

ThisBuild / scalaVersion := supportedScalaVersions.head
ThisBuild / organization := "org.virtuslab"
ThisBuild / organizationName := "VirtusLab"
ThisBuild / versionScheme := Some("early-semver")
ThisBuild / homepage := Some(url("https://github.com/VirtusLab/akka-serialization-helper"))
ThisBuild / licenses := List(
  "MIT License" -> url("https://github.com/VirtusLab/akka-serialization-helper/blob/main/LICENSE"))
ThisBuild / developers := List(
  Developer("MarconZet", "Marcin Złakowski", "mzlakowski@virtuslab.com", url("https://github.com/MarconZet")),
  Developer("HubertBalcerzak", "Hubert Balcerzak", "hubertbalc@gmail.com", url("https://github.com/HubertBalcerzak")),
  Developer("PawelLipski", "Paweł Lipski", "plipski@virtuslab.com", url("https://github.com/PawelLipski")))

Global / onChangedBuildSource := ReloadOnSourceChanges

ThisBuild / semanticdbEnabled := true
ThisBuild / semanticdbVersion := scalafixSemanticdb.revision
ThisBuild / scalafixDependencies += "com.github.liancheng" %% "organize-imports" % "0.5.0"

lazy val commonSettings = Seq(
  scalafmtOnCompile := true,
  scalacOptions ++= Seq(
      "-deprecation",
      "-encoding",
      "UTF-8",
      "-feature",
      "-language:_",
      "-Xlog-reflective-calls",
      "-Xlint:_",
      "-Ybackend-parallelism",
      "8",
      "-Ywarn-dead-code",
      "-Ywarn-unused",
      "-unchecked",
      if (sys.env.getOrElse("CI", "false") == "true") "-Xfatal-warnings" else ""),
  libraryDependencies ++= commonDeps)

publish / skip := true

lazy val scalaVersionAxis = settingKey[Option[String]]("Project scala version")

lazy val circeAkkaSerializer = (projectMatrix in file("circe-akka-serializer"))
  .settings(name := "circe-akka-serializer")
  .settings(commonSettings)
  .settings(
    libraryDependencies ++= Seq(
        akkaTyped % Provided,
        akkaTestKit % Test,
        akkaStream % Provided,
        circeCore,
        circeParser,
        circeGeneric,
        circeGenericExtras,
        reflections,
        scalaCollectionCompat),
    scalaVersionAxis := {
      virtualAxes.value.collectFirst { case x: ScalaVersionAxis => x.value }
    })
  .settings(
    resolvers += Resolver.sonatypeRepo("releases"),
    libraryDependencies ++=
      scalaVersionAxis.value.map {
        case "2.13" => Seq(scalaReflect % scalaVersion213)
        case "2.12" =>
          Seq(
            scalaReflect % scalaVersion212,
            compilerPlugin(("org.scalamacros" % "paradise" % "2.1.1" % Test).cross(CrossVersion.full))
          ) // Add macro annotations to scala 2.12
      }.get,
    Test / scalacOptions ++= scalaVersionAxis.value.map {
        case "2.13" =>
          Seq(
            "-Ymacro-annotations", // Semiautomatic circe codec derivation uses macro annotations.
            "-Xlint:-byname-implicit" // Not disabling byname-implicit raises warnings on code generated by Circe macros
          )
        case "2.12" => Seq.empty
      }.get)
  .jvmPlatform(scalaVersions = supportedScalaVersions)

lazy val serializabilityCheckerLibrary = (projectMatrix in file("serializability-checker-library"))
  .settings(name := "serializability-checker-library")
  .settings(commonSettings)
  .jvmPlatform(scalaVersions = supportedScalaVersions)

lazy val serializabilityCheckerCompilerPlugin = (projectMatrix in file("serializability-checker-compiler-plugin"))
  .settings(name := "serializability-checker-compiler-plugin")
  .settings(commonSettings)
  .settings(
    libraryDependencies ++= {
      virtualAxes.value
        .collectFirst { case x: ScalaVersionAxis => x.value }
        .map {
          case "2.13" => scalaPluginDeps213
          case "2.12" => scalaPluginDeps212
        }
        .getOrElse(Seq.empty)
    },
    libraryDependencies ++= Seq(akkaTyped % Test, akkaPersistence % Test, akkaProjections % Test, betterFiles % Test))
  .dependsOn(serializabilityCheckerLibrary)
  .jvmPlatform(scalaVersions = supportedScalaVersions)

lazy val registrationCheckerCompilerPlugin = (projectMatrix in file("registration-checker-compiler-plugin"))
  .settings(name := "registration-checker-compiler-plugin")
  .settings(commonSettings)
  .settings(
    libraryDependencies ++= {
      virtualAxes.value
        .collectFirst { case x: ScalaVersionAxis => x.value }
        .map {
          case "2.13" => scalaPluginDeps213
          case "2.12" => scalaPluginDeps212
        }
        .getOrElse(Seq.empty)
    },
    libraryDependencies ++= Seq(betterFiles % Test))
  .dependsOn(serializabilityCheckerLibrary)
  .jvmPlatform(scalaVersions = supportedScalaVersions)

lazy val dumpEventSchema = (project in file("sbt-dump-event-schema"))
  .enablePlugins(SbtPlugin)
  .settings(name := "sbt-dump-event-schema")
  .settings(commonSettings)
  .settings(
    pluginCrossBuild / sbtVersion := "1.2.8",
    scalaVersion := scalaVersion212,
    libraryDependencies ++= Seq(sprayJson, circeCore, circeGeneric, circeYaml, betterFiles),
    scriptedLaunchOpts := {
      scriptedLaunchOpts.value ++
      Seq(
        "-Xmx1024M",
        "-Dplugin.version=" + version.value,
        "-Dcompiler-plugin.version=" + (dumpEventSchemaCompilerPlugin.componentProjects.head / version).value)
    },
    scriptedDependencies := { // publishing compiler plugin locally for testing
      scriptedDependencies.value
      (dumpEventSchemaCompilerPlugin
        .filterProjects(Seq(ScalaVersionAxis(scalaVersion212, "2.12")))
        .head / publishLocal).value
      (dumpEventSchemaCompilerPlugin
        .filterProjects(Seq(ScalaVersionAxis(scalaVersion213, "2.13")))
        .head / publishLocal).value
    },
    scriptedBufferLog := false)

lazy val dumpEventSchemaCompilerPlugin = (projectMatrix in file("dump-persistence-schema-compiler-plugin"))
  .enablePlugins(AssemblyPlugin)
  .settings(name := "dump-persistence-schema-compiler-plugin")
  .settings(commonSettings)
  .settings(
    libraryDependencies ++= {
      virtualAxes.value
        .collectFirst { case x: ScalaVersionAxis => x.value }
        .map {
          case "2.13" => scalaPluginDeps213
          case "2.12" => scalaPluginDeps212
        }
        .getOrElse(Seq.empty)
    },
    libraryDependencies ++= Seq(sprayJson, betterFiles, akkaTyped % Test, akkaPersistence % Test),
    packageBin / publishArtifact := false, //we want to publish fat jar
    Compile / packageBin / artifactPath := crossTarget.value / "packageBinPlaceholder.jar", //this ensures that normal jar doesn't override fat jar
    assembly / assemblyMergeStrategy := {
      case PathList(
            "scala",
            "annotation",
            "nowarn.class" | "nowarn$.class"
          ) => //scala-collection-compat duplicates no-warn.class, as it was added to scala 2.12 after its release
        MergeStrategy.first
      case x =>
        (assembly / assemblyMergeStrategy).value.apply(x)
    },
    Compile / assembly / artifact := {
      val art = (Compile / assembly / artifact).value
      art.withClassifier(None)
    },
    assembly / assemblyJarName := s"${name.value}_${scalaBinaryVersion.value}-${version.value}.jar", //Warning: this is a default name for packageBin artefact. Without explicit rename of packageBin will result in race condition
    addArtifact(Compile / assembly / artifact, assembly))
  .jvmPlatform(scalaVersions = supportedScalaVersions)
